from aiogram.types import Message

from bot.keyboards.start_keyboard import startgame_inline
from repository.cache import CacheRepository
from repository.contextno import ContextnoRepo

RULES = """\n- –£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.\n
- –í—Å–µ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∏—Ö —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Å–ª–æ–≤–æ–º.\n
- –ß–µ–º –≤—ã—à–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–∫–µ (—á–µ–º –º–µ–Ω—å—à–µ –µ–≥–æ –Ω–æ–º–µ—Ä), —Ç–µ–º –æ–Ω–æ –±–ª–∏–∂–µ –∫ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ª–æ–≤—É.\n"""


class ChallengeService:
    def __init__(self, repo: ContextnoRepo, cache: CacheRepository) -> None:
        self.repo = repo
        self.cache = cache

    async def set_challenge_id(self, chat_id: int):
        challenge_id = await self.repo.get_challenge_id(chat_id)
        await self.cache.set_challenge_id_by_chat_id(chat_id, str(challenge_id))

    async def get_challenge_id(self, chat_id: int):
        challenge_id = await self.cache.get_challenge_id_by_chat_id(chat_id)
        return challenge_id

    async def guess_word(
        self,
        challenge_id: int,
        message: Message,
    ):
        if message.text.count(" ") >= 1:
            await message.answer("<b>–í–≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ</b>")
            return

        guess_word_model = await self.repo.get_word_rank(
            challenge_id, message.text.lower()
        )

        rank_icon = self.icons_for_ranks(guess_word_model.rank)

        if guess_word_model.error is True:
            await message.answer(
                "<i>"
                + guess_word_model.details.replace(
                    message.text.lower(), f"</i><b>{message.text.lower()}</b><i>"
                )
                + "</i>"
            )
        elif guess_word_model.rank == 1 and guess_word_model.completed is True:
            await message.answer(
                f"<i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \n\n–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ</i> <b>{guess_word_model.word}</b> <i>–∑–∞</i> {guess_word_model.tries} <i>–ø–æ–ø—ã—Ç–æ–∫ –∏</i> {guess_word_model.tips} <i>–ø–æ–¥—Å–∫–∞–∑–æ–∫.</i> \n\n<i>–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É - <b>/new</b></i>"
            )
        else:
            await self.cache.set_word_rank(
                message.chat.id, message.text.lower(), guess_word_model.rank
            )
            await message.answer(
                f"{rank_icon} <b>{guess_word_model.word}</b> - <i>{guess_word_model.rank}</i>"
            )

    async def get_tip_response(self, challenge_id: int, message: Message):
        tip_word = await self.repo.get_tip(str(challenge_id))

        if tip_word.rank == 1:
            await message.answer(
                f"<i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \n\n–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ</i> <b>{tip_word.word}</b> <i>–∑–∞</i> {tip_word.tries} <i>–ø–æ–ø—ã—Ç–æ–∫ –∏</i> {tip_word.tips} <i>–ø–æ–¥—Å–∫–∞–∑–æ–∫.</i> \n\n<i>–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É - <b>/new</b></i>"
            )
        elif tip_word.completed is True:
            await message.answer(
                '–í—ã —É–∂–µ –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ /new –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã!'
            )
        elif tip_word.rank == -1:
            await message.answer("<b>–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ</b>")
        else:
            await self.cache.set_word_rank(
                message.chat.id, tip_word.word, tip_word.rank
            )

            await message.answer(
                f"<i>–í–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞</i>: {self.icons_for_ranks(tip_word.rank)} <b>{tip_word.word}</b> - <i>{tip_word.rank}</i>"
            )

    async def get_five_closest(self, message: Message):
        five_closest = await self.cache.get_five_closests_words_by_chat_id(
            message.chat.id
        )
        if not five_closest:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ–≤–∞—Ö")
            return

        list_of_words = "\n".join(
            [
                f"{self.icons_for_ranks(rank)} <b>{word.decode('utf-8')}</b> - {int(rank)}"
                for word, rank in five_closest
            ]
        )

        await message.answer(list_of_words)

    async def send_rules(self, message: Message):
        await message.answer(
            f"<code>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞</code>: \n <i>{RULES}</i>",
            reply_markup=startgame_inline(),
        )

    async def del_challenge_id(self, chat_id: int):
        await self.cache.delete_challenge_id_by_chat_id(chat_id)

    async def del_five_closest(self, chat_id: int):
        await self.cache.delete_word_ranks_by_chat_id(chat_id)

    def icons_for_ranks(self, rank: int):
        if rank >= 1500:
            return "üî¥"
        elif rank > 300:
            return "üü°"
        else:
            return "üü¢"
